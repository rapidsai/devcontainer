name: Build and test devcontainer images

on:
  workflow_call:
    inputs:
      os:
        type: string
        required: true
        description: Image OS
      repo:
        type: string
        required: true
        description: Image repo
      push:
        type: string
        required: false
        default: 'false'
        description: Whether to push the image
      features:
        type: string
        required: true
        description: JSON list of devcontainer features
      container_env:
        type: string
        required: false
        description: JSON map of default envvars to build into the devcontainer

jobs:

  build-test-and-upload:
    name: Build (${{ matrix.arch }})
    runs-on: ${{ fromJSON(github.repository != 'rapidsai/devcontainers' && '"ubuntu-latest"' || format('"linux-{0}-cpu4"', matrix.arch)) }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    outputs:
      tag: ${{ steps.json.outputs.tag }}
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - id: json
        name: Write .devcontainer.json
        uses: ./.github/actions/devcontainer-json
        with:
          os: "${{ inputs.os }}"
          features: "${{ inputs.features }}"
          container_env: "${{ inputs.container_env }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GPUCIBOT_DOCKERHUB_USER }}
          password: ${{ secrets.GPUCIBOT_DOCKERHUB_TOKEN }}

      - name: Build ${{ steps.json.outputs.tag }}-${{ matrix.arch }}
        uses: ./.github/actions/build-linux-image
        with:
          arch: "${{ matrix.arch }}"
          repo: "${{ inputs.repo }}"
          tag: "${{ steps.json.outputs.tag }}"

      - if: inputs.push == 'true'
        name: Upload ${{ steps.json.outputs.tag }}-${{ matrix.arch }}
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: ${{ steps.json.outputs.tag }}
          path: ${{ runner.temp }}/${{ matrix.arch }}.tar

  push-to-dockerhub:
    if: inputs.push == 'true'
    name: Push to Docker Hub
    needs: build-test-and-upload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Free up disk space
        uses: ./.github/actions/free-disk-space
        with:
          tool_cache: "${{ runner.tool_cache }}"

      - name: Download ${{ needs.build-test-and-upload.outputs.tag }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-test-and-upload.outputs.tag }}
          path: ${{ runner.temp }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GPUCIBOT_DOCKERHUB_USER }}
          password: ${{ secrets.GPUCIBOT_DOCKERHUB_TOKEN }}

      - name: Push multiarch manifest to Docker Hub
        shell: bash --noprofile --norc -x -eo pipefail {0}
        env:
          name: "${{ inputs.repo }}:${{ needs.build-test-and-upload.outputs.tag }}"
        run: |

          find "${{ runner.temp }}/" -type f -name '*.tar';

          docker manifest rm ${name,,} || true;

          hashes=();

          for arch in "amd64" "arm64"; do
            # Load the arch-specific image with the final name
            docker load --input "${{ runner.temp }}/${arch}.tar";
            # Push the local image to the registry and save the remote hash
            hashes+=("$(docker push ${name,,} | tail -n1 | cut -d' ' -f3)");
          done

          # Create and push the multiarch manifest
          docker buildx imagetools create --tag ${name,,} ${hashes[@]};
