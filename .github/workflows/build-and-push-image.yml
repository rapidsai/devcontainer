name: Build and push devcontainer images

on:
  workflow_call:
    inputs:
      os:
        type: string
        required: true
      tag:
        type: string
        required: true
      features:
        type: string
        required: true

jobs:

  build-and-upload:
    name: Build and upload
    runs-on: ${{ fromJSON(github.repository != 'rapidsai/devcontainers' && '"ubuntu-latest"' || format('"linux-{0}-cpu4"', matrix.arch)) }}
    outputs:
      tag: ${{ steps.json.outputs.tag }}
      repo: ${{ steps.build.outputs.repo }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - id: json
        name: Write .devcontainer.json
        uses: ./.github/actions/devcontainer-json
        with:
          os : "${{ inputs.os }}"
          features: "${{ inputs.features }}"

      - id: build
        name: Build ${{ steps.json.outputs.tag }}-${{ matrix.arch }}
        uses: ./.github/actions/build-image
        with:
          arch: "${{ matrix.arch }}"
          tag: "${{ steps.json.outputs.tag }}"
          repo: "${{ vars.DOCKERHUB_REPOSITORY || github.repository }}"

      - name: Upload ${{ steps.json.outputs.tag }}-${{ matrix.arch }}
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: ${{ steps.json.outputs.tag }}
          path: ${{ runner.temp }}/${{ matrix.arch }}.tar

  push-to-dockerhub:
    name: Push to Docker Hub
    needs: build-and-upload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Free up disk space
        uses: ./.github/actions/free-disk-space
        with:
          tool_cache: "${{ runner.tool_cache }}"

      - name: Download ${{ needs.build-and-upload.outputs.tag }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-and-upload.outputs.tag }}
          path: ${{ runner.temp }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GPUCIBOT_DOCKERHUB_USER }}
          password: ${{ secrets.GPUCIBOT_DOCKERHUB_TOKEN }}

      - name: Push multiarch manifest to Docker Hub
        shell: bash --noprofile --norc -x -eo pipefail {0}
        env:
          tag: "${{ needs.build-and-upload.outputs.tag }}"
          name: "${{ needs.build-and-upload.outputs.repo }}:${{ needs.build-and-upload.outputs.tag }}"
        run: |

          find "${{ runner.temp }}/" -type f -name '*.tar';

          docker manifest rm ${name} || true;

          hashes=();

          for arch in "amd64" "arm64"; do
            # Load and push the linux/$arch image and read its local hash
            hash="$(docker load --input "${{ runner.temp }}/${arch}.tar" | tail -n1 | cut -d':' -f3)";
            # Tag the loaded image with the final name
            docker image tag ${hash} ${name};
            # Push the local image to the registry to get its remote hash
            hash="$(docker push ${name} | tail -n1 | cut -d' ' -f3)";
            # Save the remote hash for use below
            hashes+=("$hash");
          done

          # Create and push the multiarch manifest
          docker buildx imagetools create --tag ${name} ${hashes[@]};
