name: image-matrix

description: Determine the image matrix

inputs:
  features:
    type: string
    required: false
  scenarios:
    type: string
    required: false
  full_matrix:
    type: boolean
    default: true

outputs:
  matrix:
    value: ${{ steps.matrix.outputs.matrix }}

runs:
  using: composite
  steps:
    - id: get-pr-info
      if: inputs.full_matrix != true
      name: Get last successful main commit sha
      uses: rapidsai/shared-action-workflows/get-pr-info@main

    - name: Check if files changed
      if: inputs.full_matrix != true
      id: changes
      uses: tj-actions/changed-files@v35.4.4
      with:
        base_sha: ${{ fromJSON(steps.get-pr-info.outputs.pr-info).base.ref }}
        files: |
          images/**
          .github/workflows/test.yml
          .github/actions/build-image/action.yml
          .github/actions/image-matrix/action.yml
          .github/workflows/build-and-test-image.yml

    - name: Report changes
      if: inputs.full_matrix != true
      shell: bash
      run: echo '${{ toJSON(steps.changes.outputs) }}'

    - name: Determine the image matrix
      id: matrix
      shell: bash --noprofile --norc -x -eo pipefail {0}
      run: |
        files='${{ steps.changes.outputs.all_changed_and_modified_files }}';

        if `# Include all images if utils feature changed`              \
           echo "${{ inputs.features }}"  | grep -q '^utils$'           \
        || echo "${{ inputs.scenarios }}" | grep -q '^utils$'           \
           `# Include all images if full_matrix is true`                \
        || [ "${{ inputs.full_matrix }}" == "true" ]                    \
           `# Include all images if matrix or workflows changed`        \
        || echo "$files" | grep -q -E '^(\.github/|images/matrix\.yml)' \
        ; then
          files="$(find images -mindepth 1 -maxdepth 1 -type d)";
        fi

        changed_images="";

        # Select the matrix of images whose source files changed
        if echo "$files" | grep -q '^images/'; then

          imgs="$(                 \
            for x in ${files}; do  \
              x=${x##images/};     \
              echo "\"${x%%/*}\""; \
            done                   \
          )";

          keys="$(                          \
            echo ${imgs}                    \
          | tr '[:lower:]' '[:upper:]'      \
          | jq -cs 'map(split("-") | sort)' \
          )";

          changed_images="$(              \
            cat images/matrix.yml         \
          | yq -e -o json --no-colors     \
          | jq -ceM --argjson xs "$keys"  \
            'map(select(keys == $xs[]))'  \
         || echo ''
          )";

        fi

        # Select all images that use a changed feature
        changed_features="$(echo                                   \
          '"${{ join(fromJSON(inputs.features  || '[]'), '|') }}"' \
          '"${{ join(fromJSON(inputs.scenarios || '[]'), '|') }}"' \
        | jq -e -s                                                 \
        | jq -e 'map(split("|")) | flatten'                        \
        | jq -e 'map(select(. != ""))'                             \
        | jq -e 'map(gsub("^utils$";   "cpp"))'                    \
        | jq -e 'map(gsub("^cmake$";   "cpp"))'                    \
        | jq -e 'map(gsub("^ninja$";   "cpp"))'                    \
        | jq -e 'map(gsub("^sccache$"; "cpp"))'                    \
        | jq -e -r 'unique | join("|")'                            \
        || echo ''                                                 \
        )";

        if [[ -n "$changed_features" ]]; then
          changed_features="$(            \
            cat images/matrix.yml         \
          | grep -E "($changed_features)" \
          | yq -e -o json --no-colors     \
          | jq -ceM                       \
         || echo ''
          )";
        fi

        if [[ "$changed_images" == "null" ]]; then changed_images=""; fi
        if [[ "$changed_features" == "null" ]]; then changed_features=""; fi

        # Concatenate changed feature/image lists and write the matrix
        cat <<EOF | tee -a $GITHUB_OUTPUT
        matrix={"include":$(echo        \
          "$changed_images"             \
          "$changed_features"           \
        | jq -scM 'flatten(1) | unique' \
        )}
        EOF
