name: image-matrix

description: Determine the image matrix

inputs:
  features:
    type: string
    required: false
  scenarios:
    type: string
    required: false
  full_matrix:
    type: boolean
    default: true

outputs:
  matrix:
    value: ${{ steps.matrix.outputs.matrix }}

runs:
  using: composite
  steps:
    - name: Check if files changed
      if: inputs.full_matrix != true
      id: changes
      uses: tj-actions/changed-files@v35.4.4
      with:
        files: |
          images/**
          .github/workflows/test.yml
          .github/actions/image-matrix/action.yml
          .github/workflows/build-and-test-image.yml
          .github/actions/build-and-test-image/action.yml

    - name: Report changes
      if: inputs.full_matrix != true
      shell: bash
      run: echo '${{ toJSON(steps.changes.outputs) }}'

    - name: Determine the image matrix
      id: matrix
      shell: bash
      run: |
        features_from_changed_images="";

        # build a filter for any changed features
        changed_features="$(echo                                   \
          '"${{ join(fromJSON(inputs.features  || '[]'), '|') }}"' \
          '"${{ join(fromJSON(inputs.scenarios || '[]'), '|') }}"' \
        | jq -s 'map(select(. != "")) | unique | join("|")'        \
        )";

        files='${{ steps.changes.outputs.all_changed_and_modified_files }}';

        if [[ "${{ inputs.full_matrix }}" == "true" ]]; then
          # Include all images if full_matrix is true
          files="$(find images -mindepth 1 -maxdepth 1 -type d)";
        elif echo "$files" | grep -q -E '^(\.github/|images/matrix\.yml)'; then
          # Include all images if workflow or matrix files changed
          files="$(find images -mindepth 1 -maxdepth 1 -type d)";
        fi

        # Build a filter for any images whose source files changed
        if echo "$files" | grep -q '^images/'; then

          images=();
          for x in ${files}; do
            x="${x##images/}";
            images+=("\"${x%%/*}\"");
          done;

          features_from_changed_images="$(                 \
            echo ${images[@]}                              \
          | jq -s                                          \
          | jq 'map(split("-")) | flatten'                 \
          | jq 'map(select(. != "")) | unique | join("|")' \
          )";

        fi

        # Combine the filters of changed features and images
        filter="$(echo "$changed_features"                  \
                       "$features_from_changed_images"      \
        | jq -s 'map(split("|")) | flatten'                 \
        | jq -r 'map(select(. != "")) | unique | join("|")' \
        )";

        # Write the matrix output

        if [[ -z "$filter" ]]; then
          # If the filter is empty, produce an empty matrix
          echo "matrix={}" >> $GITHUB_OUTPUT;
        else
          # If the filter is not empty, include images that match
          cat <<EOF | yq -o json --no-colors   \
                    | jq -c -r -M '.matrix'    \
                    | cat <(echo -n matrix=) - \
                    | tee -a $GITHUB_OUTPUT
          matrix:
            include:
          $(echo grep -E "($filter)" ./images/matrix.yml \
          | xargs -r -d'\n' -I{} echo '  {}'             \
          )
          EOF
        fi
